apply plugin: 'java'

// Translation
apply plugin: "org.omegat.gradle"

// FIXME: here is ugly configuration for omegat plugin
dependencies {
    omegat files('buildSrc/OmegaT.jar'),
           fileTree('buildSrc/lib')
}

task cleanTargetDirs(type: Delete) {
   file("$projectDir/target").listFiles().findAll { it.isDirectory() }.each { delete it }
}

Closure translationTask = { taskName, targetName ->
    task(taskName, type: Jar, dependsOn: [jar, translate]) {
        baseName targetName
        def fromDir = ''
        if (taskName.startsWith("ide")) {
           fromDir = "$projectDir/target/$targetName"
           destinationDir new File("$buildDir")
        } else {
           fromDir = "$projectDir/target/plugins/$targetName"
           destinationDir new File("$buildDir/plugins")
        }
        inputs.dir new File("$projectDir/target/$targetName")

        into('messages') {
            from "$fromDir/messages"
        }
        into('fileTemplates_ja') {
            from "$fromDir/fileTemplates"
        }
        into('inspectionDescriptions_ja') {
            from "$fromDir/inspectionDescriptions"
        }
        into('intentionDescriptions_ja') {
            from "$fromDir/intentionDescriptions"
        }
        into('postfixTemplates_ja') {
            from "$fromDir/postfixTemplates"
        }
        into('search_ja') {
            from "$fromDir/search"
        }
        into('tips_ja') {
            from "$fromDir/tips"
        }
        from("$fromDir/") {
            exclude(['messages', 'fileTemplates', 'inspectionDescriptions',
                     'intentionDescriptions', 'postfixTemplates', 'search', 'tips', '.ignoreme'])
        }
    }
}

tasks.addRule("Pattern: plugin<ID>") { String taskName ->
    if (taskName.startsWith("plugin")) {
        def pluginName = taskName[6].toLowerCase() + taskName[7..taskName.length() - 1]
        translationTask(taskName, pluginName)
    }
}

tasks.addRule("Pattern: ide<ID>") { String taskName ->
    if (taskName.startsWith("ide")) {
        def toolName = taskName[3].toLowerCase() + taskName[4..taskName.length() - 1]
        translationTask(taskName, toolName)
    }
}

artifacts {
    archives ideIntellijCommunity, ideAndroid, ideProduct
    archives pluginAndroid, pluginAnt, pluginGit4idea, pluginGradle
    archives pluginJavaI18n, pluginJavaFX, pluginJunit, pluginMaven, pluginTerminal
    archives pluginTestng, pluginUiDesigner, pluginYaml
}

dependencies {
    testRuntime ideIntellijCommunity.outputs.files
    testRuntime ideAndroid.outputs.files
    testRuntime ideProduct.outputs.files
    testRuntime pluginAndroid.outputs.files
    testRuntime pluginAnt.outputs.files
    testRuntime pluginGit4idea.outputs.files
    testRuntime pluginGradle.outputs.files
    testRuntime pluginJavaI18n.outputs.files
    testRuntime pluginJavaFX.outputs.files
    testRuntime pluginJunit.outputs.files
    testRuntime pluginMaven.outputs.files
    testRuntime pluginTerminal.outputs.files
    testRuntime pluginTestng.outputs.files
    testRuntime pluginUiDesigner.outputs.files
    testRuntime pluginYaml.outputs.files
}

clean.dependsOn cleanTargetDirs

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}
