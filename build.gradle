apply plugin: 'java'

// Translation
apply plugin: "org.omegat.gradle"

// FIXME: here is ugly configuration for omegat plugin
dependencies {
    omegat files('buildSrc/OmegaT.jar'),
           fileTree('buildSrc/lib')
}

ext {
    targetDir = new File(rootDir, 'target')
    sourceDir = new File(rootDir, 'source')
}

task cleanTargetDirs(type: Delete) {
    targetDir.listFiles().findAll { it.isDirectory() }.each { delete it }
}


tasks.addRule("Pattern: plugin<ID>") { String taskName ->
    if (taskName.startsWith("plugin")) {
        def pluginName = taskName[6].toLowerCase() + taskName[7..taskName.length() - 1]
        task(taskName, type: Jar, dependsOn: [jar, translate]) {
            inputs.dir new File(targetDir, pluginName)
            destinationDir new File("$buildDir")
            baseName pluginName

            into('messages') {
                from "$projectDir/target/plugins/$pluginName/messages"
            }
            into('fileTemplates_ja') {
                from "$projectDir/target/plugins/$pluginName/fileTemplates"
            }
            into('inspectionDescriptions_ja') {
                from "$projectDir/target/plugins/$pluginName/inspectionDescriptions"
            }
            into('intentionDescriptions_ja') {
                from "$projectDir/target/plugins/$pluginName/intentionDescriptions"
            }
            into('postfixTemplates_ja') {
                from "$projectDir/target/plugins/$pluginName/postfixTemplates"
            }
            into('search_ja') {
                from "$projectDir/target/plugins/$pluginName/search"
            }
            into('tips_ja') {
                from "$projectDir/target/plugins/$pluginName/tips"
            }
            from("$projectDir/target/plugins/$pluginName/") {
                exclude(['messages', 'fileTemplates', 'inspectionDescriptions',
                         'intentionDescriptions', 'postfixTemplates', 'search', 'tips'])
            }
        }
    }
}

tasks.addRule("Pattern: ide<ID>") { String taskName ->
    if (taskName.startsWith("ide")) {
        def toolName = taskName[6].toLowerCase() + taskName[7..taskName.length() - 1]
        task(taskName, type: Jar, dependsOn: [jar, translate]) {
            inputs.dir new File(targetDir, toolName)
            destinationDir new File("$buildDir")
            baseName toolName

            into('messages') {
                from "$projectDir/target/$toolName/messages"
            }
            into('fileTemplates_ja') {
                from "$projectDir/target/$toolName/fileTemplates"
            }
            into('inspectionDescriptions_ja') {
                from "$projectDir/target/$toolName/inspectionDescriptions"
            }
            into('intentionDescriptions_ja') {
                from "$projectDir/target/$toolName/intentionDescriptions"
            }
            into('postfixTemplates_ja') {
                from "$projectDir/target/$toolName/postfixTemplates"
            }
            into('search_ja') {
                from "$projectDir/target/$toolName/search"
            }
            into('tips_ja') {
                from "$projectDir/target/$toolName/tips"
            }
            from("$projectDir/target/$toolName/") {
                exclude(['messages', 'fileTemplates', 'inspectionDescriptions',
                         'intentionDescriptions', 'postfixTemplates', 'search', 'tips'])
            }
        }
    }
}

artifacts {
    archives ideIntellijCommunity, ideAndroid
    archives pluginAndroid, pluginAnt, pluginGit4idea, pluginGradle
    archives pluginJavaI18n, pluginJavaFX, pluginJunit, pluginMaven, pluginTerminal
    archives pluginTestng, pluginUiDesigner, pluginYaml
}

dependencies {
    testRuntime ideIntellijCommunity.outputs.files
    testRuntime pluginAndroid.outputs.files
    testRuntime pluginAnt.outputs.files
    testRuntime pluginGit4idea.outputs.files
    testRuntime pluginGradle.outputs.files
    testRuntime pluginJavaI18n.outputs.files
    testRuntime pluginJavaFX.outputs.files
    testRuntime pluginJunit.outputs.files
    testRuntime pluginMaven.outputs.files
    testRuntime pluginTerminal.outputs.files
    testRuntime pluginTestng.outputs.files
    testRuntime pluginUiDesigner.outputs.files
    testRuntime pluginYaml.outputs.files
}

clean.dependsOn cleanTargetDirs

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}
