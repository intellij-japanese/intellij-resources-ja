// OmegaT plugin
buildscript {
    repositories {
        maven {
            url "https://dl.bintray.com/miurahr/maven/"
        }
        maven {
            url "https://dl.bintray.com/omegat-org/maven/"
        }
        jcenter()
    }
    dependencies {
        classpath group: 'org.omegat.gradle', name: 'gradle-omegat-plugin', version: '0.9.2'
    }
}
apply plugin: "org.omegat.gradle"

repositories {
     maven {
        url "https://dl.bintray.com/miurahr/maven/"
    }
    maven {
        url "https://dl.bintray.com/omegat-org/maven/"
    }
    jcenter()
}
import org.omegat.gradle.OmegatTask

// Generation of IntelliJ localized resources
apply plugin: 'java'
// Closure to make jar generation task with specified type and name
Closure customJarTask = { type, taskName, targetName ->
    task(taskName, type: Jar, dependsOn: [jar, translate]) {
        archiveName = "resources_ja.jar"
        def fromDir = ''
        if (type.equals("plugin")) {
            fromDir = "$projectDir/target/plugins/$targetName"
            destinationDir new File("$buildDir/tmp/plugins/$targetName/lib")
        } else {
            fromDir = "$projectDir/target/$targetName"
            destinationDir new File("$buildDir/tmp/ide/$targetName/lib")
        }
        inputs.dir new File("$fromDir")
        from("$fromDir/") {
            exclude(['messages', 'fileTemplates', 'inspectionDescriptions',
                    'intentionDescriptions', 'postfixTemplates', 'search', 'tips', '.ignoreme'])
        }

        into('messages') {                 from "$fromDir/messages"  }
        into('fileTemplates_ja') {         from "$fromDir/fileTemplates" }
        into('inspectionDescriptions_ja') {from "$fromDir/inspectionDescriptions"}
        into('intentionDescriptions_ja') { from "$fromDir/intentionDescriptions"}
        into('postfixTemplates_ja') {      from "$fromDir/postfixTemplates"}
        into('search_ja') {                from "$fromDir/search"}
        into('tips_ja') {                  from "$fromDir/tips"}
    }
    if (type.equals("plugin")) {
        archivePlugins.mustRunAfter(taskName)
    }
}

// Remove ugly generated default jar file.
task defaultBuildLibsClean(type: Delete) {
    delete "$buildDir/libs"
}
processTestResources.dependsOn 'defaultBuildLibsClean'

tasks.addRule("Pattern: plugin<ID>") { String taskName ->
    if (taskName.startsWith("plugin")) {
        def pluginName = taskName[6].toLowerCase() + taskName[7..taskName.length() - 1]
        customJarTask('plugin', taskName, pluginName)
    }
}

tasks.addRule("Pattern: platformJar<ID>") { String taskName ->
    if (taskName.startsWith("platformJar")) {
        def toolName = taskName[11].toLowerCase() + taskName[12..taskName.length() - 1]
        customJarTask('ide', taskName, toolName)
    }
}

tasks.addRule("Pattern: ide<ID>") { String taskName ->
    if (taskName.startsWith("ide")) {
        def toolName = taskName[3].toLowerCase() + taskName[4..taskName.length() - 1]
        def dependName = 'platformJar' + taskName[3..taskName.length() - 1]
        task (taskName, type: Zip, dependsOn: dependName ) {
            from "build/tmp/ide/$toolName"
            archiveName "${toolName}.zip"
        }
    }
}

task archivePlugins(type: Zip) {
    from 'build/tmp/plugins'
    archiveName 'plugins.zip'
}

artifacts {
    archives archivePlugins
}

task runOmegaT(type: OmegatTask) {
    options = [projectDir]
}

// Includes specifications for resource artifacts
apply from: 'source/source.gradle'

task wrapper(type: Wrapper) {
  gradleVersion = '2.14'
}
