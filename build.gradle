apply plugin: 'java'

// Translation
apply plugin: "org.omegat.gradle"

// FIXME: here is ugly configuration for omegat plugin
dependencies {
    omegat files('buildSrc/OmegaT.jar'),
           fileTree('buildSrc/lib')
}

ext {
    targetDir = new File(rootDir, 'target')
    sourceDir = new File(rootDir, 'source')
}

task cleanTargetDirs(type: Delete) {
    targetDir.listFiles().findAll { it.isDirectory() }.each { delete it }
}


tasks.addRule("Pattern: plugin<ID>") { String taskName ->
    if (taskName.startsWith("plugin")) {
        def pluginName = taskName[6].toLowerCase() + taskName[7..taskName.length() - 1]
        def pluginDir = new File(targetDir, 'plugins' + pluginName)
        task(taskName, type: Jar, dependsOn: [jar, translate]) {
            inputs.dir new File(targetDir, pluginName)
            destinationDir new File("$buildDir")
            baseName pluginName

            into('messages') {
                from "$projectDir/target/plugins/$pluginName/messages"
            }
            into('fileTemplates_ja') {
                from "$projectDir/target/plugins/$pluginName/fileTemplates"
            }
            into('inspectionDescriptions_ja') {
                from "$projectDir/target/plugins/$pluginName/inspectionDescriptions"
            }
            into('intentionDescriptions_ja') {
                from "$projectDir/target/plugins/$pluginName/intentionDescriptions"
            }
            into('postfixTemplates_ja') {
                from "$projectDir/target/plugins/$pluginName/postfixTemplates"
            }
            into('search_ja') {
                from "$projectDir/target/plugins/$pluginName/search"
            }
            into('tips_ja') {
                from "$projectDir/target/plugins/$pluginName/tips"
            }
            from("$projectDir/target/plugins/$pluginName/") {
                exclude(['messages', 'fileTemplates', 'inspectionDescriptions',
                         'intentionDescriptions', 'postfixTemplates', 'search', 'tips'])
            }
        }
    }
}

task intellijJar(type: Jar, dependsOn: [jar, translate]) {
    inputs.dir new File(targetDir, 'intellij-community')
    destinationDir new File("$buildDir")
    archiveName "resources_ja-intellij-community.jar"
    into('messages') {
        from "$projectDir/target/intellij-community/messages"
    }
    into('fileTemplates_ja') {
        from "$projectDir/target/intellij-commuity/fileTemplates"
    }
    into('inspectionDescriptions_ja') {
        from "$projectDir/target/intellij-community/inspectionDescriptions"
    }
    into('intentionDescriptions_ja') {
        from "$projectDir/target/intellij-community/intentionDescriptions"
    }
    into('postfixTemplates_ja') {
        from "$projectDir/target/intellij-community/postfixTemplates"
    }
    into('search_ja') {
        from "$projectDir/target/intellij-community/search"
    }
    into('tips_ja') {
        from "$projectDir/target/intellij-community/tips"
    }
}

artifacts {
    archives intellijJar
    archives pluginAndroid, pluginAnt, pluginGit4idea, pluginGradle
    archives pluginJava-i18n, pluginJavaFX, pluginJunit, pluginMaven, pluginTerminal
    archives pluginTestng, pluginUiDesigner, pluginYaml
}

dependencies {
    testRuntime intellijJar.outputs.files
    testRuntime pluginAndroid.outputs.files
    testRuntime pluginAnt.outputs.files
    testRuntime pluginGit4idea.outputs.files
    testRuntime pluginGradle.outputs.files
    testRuntime pluginJava-i18n.outputs.files
    testRuntime pluginJavaFX.outputs.files
    testRuntime pluginJunit.outputs.files
    testRuntime pluginMaven.outputs.files
    testRuntime pluginTerminal.outputs.files
    testRuntime pluginTestng.outputs.files
    testRuntime pluginUiDesigner.outputs.files
    testRuntime pluginYaml.outputs.files
}

clean.dependsOn cleanTargetDirs

task wrapper(type: Wrapper) {
  gradleVersion = '2.14.1'
}
